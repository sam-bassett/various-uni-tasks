package Enigma;

public class TestSuite {

	public static void main (String[] args) {
		System.out.println("starting test suite\n\n\n");
		testM3();
		testM4();
		System.out.println("\n\n\nall tests passed! You are awesome!");
	}

	public static void testM3() {
		TestRotors.test();
		TestEnigma.test();
		simpleM3Test();
		longerM3Test();
		bigM3Test();
	}

	public static void testM4() {
		// simple M4 test
		System.out.println("starting simple test");
		EnigmaMachine m4 = EnigmaBuilder.constructM4("6664C");
		m4.setIndicators("AAAAA");
		String plainText = "SDKLFJSLDFJKSLDFKJSDFLKJELKSJDFLKSJDLKSDJFLKJSDF";
		String encoded =   "AEOVXIPCPVZUDSMZCIRRPJCDOYSGATOYBBVSCIBGRKMOSOPU";
		String result = m4.encipher(plainText);
		assert(result.equals(encoded));

		// rotor indicator test
		System.out.println("starting rotor indicator test");
		// organised in list 4321B, as that's how each tells whether the
		// next steps. 
		// how to set each one it's corresponding indicator?
		// easy with immobile reflector, 

		// ah! setIndicators is a public function, so you can change that to
		// your heart's content without messing up M3. Done?
		m4 = EnigmaBuilder.constructM4("1111A");
		// slowest, slow, medium, fast, reflector
		m4.setIndicators("AAAZA");
		plainText = "A";
		encoded   = "H";
		result = m4.encipher(plainText);
		assert(result.equals(encoded));

		// another simple test
		System.out.println("starting another simple test");
		m4 = EnigmaBuilder.constructM4("4142A");
		m4.setIndicators("AFAFA");
		plainText = "JJJJJFEIFKSIIQZZFKEIJNVVCOOW";
		encoded   = "OVGGKNRQKXGTZSJKUILBXUCXRZLU";
		result = m4.encipher(plainText);
		assert(result.equals(encoded));

		// double stepping
		System.out.println("testing long input");
		m4 = EnigmaBuilder.constructM4("2178B");
		m4.setIndicators("COMPP");
		plainText = "ENIGMAENGMAENIGMAENIGMA";
		encoded   = "SMCRAHCZHJPNAMVAZWWFKBW";
		result = m4.encipher(plainText);
		//assert(result.equals(encoded));

		m4 = EnigmaBuilder.constructM4("1182C");
		m4.setIndicators("NAZIS");
		plainText = "OURFORMOFGOVERNMENTDOESNOTENTERINTORIVALRYWITHTHEINSTITUTIONS" +
				"OFOTHERSOURGOVERNMENTDOESNOTCOPYOURNEIGHBORSBUTISANEXAMPLE" +
				"TOTHEMITISTRUETHATWEARECALLEDADEMOCRACYFORTHEADMINISTRATION" +
				"ISINTHEHANDSOFTHEMANYANDNOTOFTHEFEWBUTWHILETHEREEXISTSEQUAL" +
				"JUSTICETOALLANDALIKEINTHEIRPRIVATEDISPUTESTHECLAIMOFEXCELLENCE" +
				"ISALSORECOGNIZEDANDWHENACITIZENISINANYWAYDISTINGUISHEDHEISPREFERRED" +
				"TOTHEPUBLICSERVICENOTASAMATTEROFPRIVILEGEBUTASTHEREWARDOFMERIT" +
				"NEITHERISPOVERTYANOBSTACLEBUTAMANMAYBENEFITHISCOUNTRYWHATEVER" +
				"THEOBSCURITYOFHISCONDITIONTHEREISNOEXCLUSIVENESSINOURPUBLICLIFE" +
				"ANDINOURPRIVATEBUSINESSWEARENOTSUSPICIOUSOFONEANOTHERNORANGRYWITH" +
				"OURNEIGHBORIFHEDOESWHATHELIKESWEDONOTPUTONSOURLOOKSATHIMWHICHTHOUGH" +
				"HARMLESSARENOTPLEASANTWHILEWEARETHUSUNCONSTRAINEDINOURPRIVATEBUSINESS" +
				"ASPIRITOFREVERENCEPERVADESOURPUBLICACTSWEAREPREVENTEDFROMDOINGWRONG" +
				"BYRESPECTFORTHEAUTHORITIESANDFORTHELAWSHAVINGAPARTICULARREGARDTOTHOSE" +
				"WHICHAREORDAINEDFORTHEPROTECTIONOFTHEINJUREDASWELLASTHOSEUNWRITTENLAWS" +
				"WHICHBRINGUPONTHETRANSGRESSOROFTHEMTHEREPROBATIONOFTHEGENERALSENTIMENT";

		encoded   = "BAZBMJXZYJQDVFIZUVNJMLEOAEQGWJHVBWIABNIYDNNSOQCJMVDZHQLQKZQSPKVGFLXTOEBHDEFJXBBIWUZCMTBHWPVGZGCXEXNQFGMPACXGURVXYVTXGYKEQMXIIVPQWP" +
				"TQLUSJHEDYSQXVMZLBFHFQRUJRJSMIVDEUCLBPWOOXOFYZDQYVVYGMTCNPEVEIQUPQOAIJVSYWBYPQDPJUGKGVTRXNQMZREMXKCZQUGSBECCBIMTXTKQTPERCIWUKRZXJU" +
				"OBUCRIYNMSXADNDPJYESLJVHEWQFQNRLSWQMCEGBACQMDKWVPIEXNKEPFSPOGDNIVSUHGSAWAXVPKLHTSZDXQVCGNVNIHEZOUTXZWMACTIKQARRDNIUHMMIBBEPIAKUTOI" +
				"XSFJLLFGXOAHHPQAJSDWCESPGALKPWMPUPVNWLZDARPTNCWDPZHPLHKHNMFSXSKGHTKRCWEBVTSJAKKAGXJQNALHPVWECFKKYAKATUJPMQHYDYVKHNDFIQKLBNPQJPKAZI" +
				"RHLVOPZYAGMLCPGKCGQBMHZTOIFRQPBPDITQAMIWEBFHQRKZOQHPOPCCYJYFKIMBSFZGLYMECXTIKWIHDWMPCXWDTBBCTCSWNMXHVWGWWKPHPJLSNASLPZYJXRSUVJZMIR" +
				"CFUYNGPRJCWCEJSFDMYHOQYVYFECWUFJXQQRSOQQYQBHCPXDEHAJDKUAPPYTOHQTFTIJVXYSWYQXCTVLUVQZKBWLQNGGFRWEYNHDPWNKHYRLBLBDUWDRVHMSWEIHMBHQQE" +
				"GKMYRSTZSZINLLMOYAVMPSCAQKBZJIHRHGMTOSAIPJWJQVMKDNSNCQUSLHVRSELUYIJSKTEJIYWFCIUOJACSZQNJVSWYKPLYFRKZFESBFXUCQXAVSLTJNPIVINPRMEUOHV" +
				"UEUEWJOSQIIRDQBIRWOSPXOXTRNYCTPZOECZODXYMGBOVEGUQBWTNVGTSEATTABPRZWCQQMRUDUOHWDGURTVGVHISMSQSKZLRESGBTYLYXTGSWYGPOXJQEV";
		result = m4.encipher(plainText);
		try {
			assert(result.equals(encoded));
		} catch (AssertionError e) {
			System.out.println(encoded);
			System.out.println(result);
			System.exit(0);
		}
	}

	public static void simpleM3Test() {
		System.out.println("simple m3 test...");
		// test from wikipedia enigma page
		EnigmaMachine m3 = EnigmaBuilder.constructM3 ("123B");
		String plainText  = "AAAAA";
		String cipherText = "BDZGO";
		m3.setIndicators ("AAA");
		assert (m3.encipher (plainText).equals (cipherText));
		System.out.println("passed!");
	}

	public static void longerM3Test() {
		System.out.println ("longer test...");
		// test from http://enigmaco.de/enigma/enigma.html
		EnigmaMachine m3 = EnigmaBuilder.constructM3 ("123B");

		String plainText  = "WHEREEVERYOUGOTHEREYOUAREWHEREEVERYOUGOTHEREYOUAREWHEREEVERYOUGOTHEREYOUAREWHEREEVERYOUGOTHEREYOUAREWHEREEVERYOUGOTHEREYOUAREWHEREEVERYOUGOTHEREYOUARE";
		String cipherText = "KPCURNSYDGLDHCUGTOOMLAQGCDQKHOUMRBNBFXDEKUIKBCJHKVPEGLYXBTKFFATZEYYLTNFQGLDSQXOYKUHSGPLVNJTWCZXXKEFBBZGHPLHKVGIFBPLRSVSQYOIXTNEGPMNPBGVDXYHMUNUUDYYLZX";

		m3.setIndicators ("AAA");
		String m3Text = m3.encipher(plainText);
		try {
			assert (m3Text.equals (cipherText));
		} catch (AssertionError e) {
			System.out.println(plainText);
			System.out.println(m3Text);
			System.out.println(cipherText);
			System.exit(0);
		}
		System.out.println("passed!");
	}

	public static void bigM3Test() {
		System.out.println ("\"YUCK FIX\" test...");

		// test validated at http://enigmaco.de/enigma/enigma.html
		EnigmaMachine m3 = EnigmaBuilder.constructM3 ("451B");
		String cipherText = "BTNJJFJGELCFIPFTLANTCABHGKDFCJWYMPKTFRLWOIQHLBXZCYSBFTIJREAJWHHWQUVLIEVYBANINWFKQYMYRELWPHEYWNSOZCRKIFNDGCNGDQLVTQEWHITLYCNLGCLTJGDLPPWXMTZHNYSLNYMGVOWJQMYEOJAIXYINDUWFGEEIQGXRXKYFMQNLCTQVJEFVGPKUNOXMTMKNJQGGIIKAJZIEHUPVVGZVTNCMSQSWMATLOORQDOXASDTCFBSQDQJPXUCUWTVJEYPNDMGUBBLSRXBINNVOUZZGZRFSCATQWKMCVRBYLEHGVPFXIINZRLMNOWFONLDUGPPQNVNQFTYPIEOCMCXFFQWHNKYTWHFBOFZGQQBYSPNWWSHGULJYFZYBHJAPOQREBQIONTDFFGRWLHHAOLMEJBBZSPXTKDNQYDRFKTGIDVZKPLJZUDELBWQGTURXWJJHCJYXVEMXIQZNAPPDLQKEEBDTGYVBNCNUFKWYFFNETMZLJRBASQTTSTQJTTYQFBLXSGOJXRIXAFCYXMCPBMZQNHHRQTOWIYAMVUGVJGMIGVEWJOTAYXGOLQQCRCQOYCMGZMSSLCLEBMSBIAJKYBLCHCDPYGLPLCKGXTXMKIAKXQWFHYLCGBFGYTQWIKSKOHYHPBJRYBJYAIFGAMGYEMLYOQZONCGXDQSZZIHPQFYXYRTOFOCUVAVEOPXLJUZUXTJUWWDMRDZZAHGTTLNAYCSLVLOFRYYZEDBNPRCIHBYTNVBWYQKJQMEMBJSTLXRDQQFXQBTDMQURKFPYSFQRXIWBZUEALOKHWKCFACIIDVMJVZEZECZYPGNTFZBYMFBEWOPLKKLPZQXGCDIMPMBSVDIUDRRJRBMODKYKHVBOYLMYHOVEMBTVIALAAEFFIAXTHVCMLOFWPVVILTXTAMCSLEBMPDMZMPSPNZVVYFMIXQAPKXRTLVFVUBQULGNJYTXXUWZZOORJQXMMRTSUVJJKYUCKFIXOTOPTQZQQXSYMUBSCHGGELPFZNQSZOYZSLQKWP";
		String plainText
		m3.setIndicators ("IYP");
		System.out.println("BTNJJFJGELCFIPFTLANTCABHGKD".length());
		assert(m3.getCurrentIndicators().equals("IYP"));

		String m3Text = m3.encipher(cipherText);
		try {
			assert (m3Text.equals (plainText));
		} catch (AssertionError e) {
			System.out.println(cipherText);
			System.out.println(m3Text);
			System.out.println(plainText);
			System.exit(0);
		}
		System.out.println("passed!");
	}

}
